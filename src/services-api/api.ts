/* tslint:disable */
/* eslint-disable */
/**
 * MininCode API
 * API для работы с организациями на платформе \"MininCode\"
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateNews
 */
export interface CreateNews {
    /**
     * Список медиа файлов
     * @type {Array<string>}
     * @memberof CreateNews
     */
    'media': Array<string>;
    /**
     * Заголовок новости
     * @type {string}
     * @memberof CreateNews
     */
    'title': string;
    /**
     * Полное описание новости
     * @type {string}
     * @memberof CreateNews
     */
    'description': string;
    /**
     * Id организации, которая выпустила пост
     * @type {string}
     * @memberof CreateNews
     */
    'organization_id': string;
}
/**
 * 
 * @export
 * @interface GetOrganizationsByStatus
 */
export interface GetOrganizationsByStatus {
    /**
     * 
     * @type {string}
     * @memberof GetOrganizationsByStatus
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface ModerationApprove
 */
export interface ModerationApprove {
    /**
     * ID организации
     * @type {string}
     * @memberof ModerationApprove
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ModerationReject
 */
export interface ModerationReject {
    /**
     * ID организации
     * @type {string}
     * @memberof ModerationReject
     */
    'id': string;
    /**
     * Причина отклонения
     * @type {string}
     * @memberof ModerationReject
     */
    'reason': string;
}
/**
 * 
 * @export
 * @interface News
 */
export interface News {
    /**
     * Id новости
     * @type {string}
     * @memberof News
     */
    'id': string;
    /**
     * Список медиа файлов
     * @type {Array<string>}
     * @memberof News
     */
    'media': Array<string>;
    /**
     * Дата публикации
     * @type {string}
     * @memberof News
     */
    'publish_data': string;
    /**
     * Заголовок новости
     * @type {string}
     * @memberof News
     */
    'title': string;
    /**
     * Полное описание новости
     * @type {string}
     * @memberof News
     */
    'description': string;
    /**
     * Id организации, которая выпустила пост
     * @type {string}
     * @memberof News
     */
    'organization_id': string;
}
/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * Уникальный идентификатор организации
     * @type {string}
     * @memberof Organization
     */
    'id': string;
    /**
     * Уникальный идентификатор организации
     * @type {string}
     * @memberof Organization
     */
    'owner_id'?: string;
    /**
     * ID фотографии
     * @type {string}
     * @memberof Organization
     */
    'photo_id': string | null;
    /**
     * Название организации
     * @type {string}
     * @memberof Organization
     */
    'title': string;
    /**
     * Подробное описание организации
     * @type {string}
     * @memberof Organization
     */
    'description': string;
    /**
     * Контактный телефон
     * @type {string}
     * @memberof Organization
     */
    'phone': string;
    /**
     * Электронная почта
     * @type {string}
     * @memberof Organization
     */
    'email': string;
    /**
     * Географическая широта
     * @type {number}
     * @memberof Organization
     */
    'latitude': number;
    /**
     * Географическая долгота
     * @type {number}
     * @memberof Organization
     */
    'longitude': number;
    /**
     * Статус организации
     * @type {string}
     * @memberof Organization
     */
    'status': OrganizationStatusEnum;
}

export const OrganizationStatusEnum = {
    Pending: 'pending',
    Approved: 'approved',
    Rejected: 'rejected'
} as const;

export type OrganizationStatusEnum = typeof OrganizationStatusEnum[keyof typeof OrganizationStatusEnum];

/**
 * 
 * @export
 * @interface OrganizationCreate
 */
export interface OrganizationCreate {
    /**
     * ID фотографии
     * @type {string}
     * @memberof OrganizationCreate
     */
    'photo_id': string | null;
    /**
     * Название организации
     * @type {string}
     * @memberof OrganizationCreate
     */
    'title': string;
    /**
     * Подробное описание организации
     * @type {string}
     * @memberof OrganizationCreate
     */
    'description': string;
    /**
     * Контактный телефон
     * @type {string}
     * @memberof OrganizationCreate
     */
    'phone': string;
    /**
     * Электронная почта
     * @type {string}
     * @memberof OrganizationCreate
     */
    'email': string;
    /**
     * Географическая широта
     * @type {number}
     * @memberof OrganizationCreate
     */
    'latitude': number;
    /**
     * Географическая долгота
     * @type {number}
     * @memberof OrganizationCreate
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface OrganizationUpdate
 */
export interface OrganizationUpdate {
    /**
     * ID фотографии
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'photo_id': string | null;
    /**
     * Название организации
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'title': string;
    /**
     * Подробное описание организации
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'description': string;
    /**
     * Контактный телефон
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'phone': string;
    /**
     * Электронная почта
     * @type {string}
     * @memberof OrganizationUpdate
     */
    'email': string;
    /**
     * Географическая широта
     * @type {number}
     * @memberof OrganizationUpdate
     */
    'latitude': number;
    /**
     * Географическая долгота
     * @type {number}
     * @memberof OrganizationUpdate
     */
    'longitude': number;
}

/**
 * NewsApi - axios parameter creator
 * @export
 */
export const NewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CreateNews
         * @param {CreateNews} [createNews] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNews: async (createNews?: CreateNews, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createNews, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetAllNews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNews: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetAllNewsById
         * @param {string} id Идентификатор новости
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewsById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNewsById', 'id', id)
            const localVarPath = `/news/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsApi - functional programming interface
 * @export
 */
export const NewsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NewsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary CreateNews
         * @param {CreateNews} [createNews] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNews(createNews?: CreateNews, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNews(createNews, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NewsApi.createNews']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GetAllNews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllNews(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<News>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllNews(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NewsApi.getAllNews']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary GetAllNewsById
         * @param {string} id Идентификатор новости
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewsById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<News>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewsById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NewsApi.getNewsById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NewsApi - factory interface
 * @export
 */
export const NewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NewsApiFp(configuration)
    return {
        /**
         * 
         * @summary CreateNews
         * @param {CreateNews} [createNews] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNews(createNews?: CreateNews, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createNews(createNews, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetAllNews
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNews(options?: RawAxiosRequestConfig): AxiosPromise<Array<News>> {
            return localVarFp.getAllNews(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetAllNewsById
         * @param {string} id Идентификатор новости
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewsById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<News> {
            return localVarFp.getNewsById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NewsApi - object-oriented interface
 * @export
 * @class NewsApi
 * @extends {BaseAPI}
 */
export class NewsApi extends BaseAPI {
    /**
     * 
     * @summary CreateNews
     * @param {CreateNews} [createNews] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public createNews(createNews?: CreateNews, options?: RawAxiosRequestConfig) {
        return NewsApiFp(this.configuration).createNews(createNews, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetAllNews
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public getAllNews(options?: RawAxiosRequestConfig) {
        return NewsApiFp(this.configuration).getAllNews(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetAllNewsById
     * @param {string} id Идентификатор новости
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public getNewsById(id: string, options?: RawAxiosRequestConfig) {
        return NewsApiFp(this.configuration).getNewsById(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Добавить новую организацию
         * @param {OrganizationCreate} organizationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewOrganization: async (organizationCreate: OrganizationCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationCreate' is not null or undefined
            assertParamExists('addNewOrganization', 'organizationCreate', organizationCreate)
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Одобрить организацю
         * @param {ModerationApprove} moderationApprove 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveOrganization: async (moderationApprove: ModerationApprove, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moderationApprove' is not null or undefined
            assertParamExists('approveOrganization', 'moderationApprove', moderationApprove)
            const localVarPath = `/organizations/moderation/approve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moderationApprove, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удалить организацию
         * @param {string} id Идентификатор организации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOrganization', 'id', id)
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить список всех организаций
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrganizations: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить список всех организаций для пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrganizationsForUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organizations/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить информацию об организации по ID
         * @param {string} id Идентификатор организации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganizationById', 'id', id)
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить организации по типу верификации
         * @param {GetOrganizationsByStatus} getOrganizationsByStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationByStatus: async (getOrganizationsByStatus: GetOrganizationsByStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getOrganizationsByStatus' is not null or undefined
            assertParamExists('getOrganizationByStatus', 'getOrganizationsByStatus', getOrganizationsByStatus)
            const localVarPath = `/organizations/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getOrganizationsByStatus, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Отклонить организацию
         * @param {ModerationReject} moderationReject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectOrganization: async (moderationReject: ModerationReject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moderationReject' is not null or undefined
            assertParamExists('rejectOrganization', 'moderationReject', moderationReject)
            const localVarPath = `/organizations/moderation/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moderationReject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить информацию об организации
         * @param {string} id Идентификатор организации
         * @param {OrganizationUpdate} organizationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization: async (id: string, organizationUpdate: OrganizationUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOrganization', 'id', id)
            // verify required parameter 'organizationUpdate' is not null or undefined
            assertParamExists('updateOrganization', 'organizationUpdate', organizationUpdate)
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Добавить новую организацию
         * @param {OrganizationCreate} organizationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewOrganization(organizationCreate: OrganizationCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewOrganization(organizationCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.addNewOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Одобрить организацю
         * @param {ModerationApprove} moderationApprove 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveOrganization(moderationApprove: ModerationApprove, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveOrganization(moderationApprove, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.approveOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Удалить организацию
         * @param {string} id Идентификатор организации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganization(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganization(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.deleteOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить список всех организаций
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrganizations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOrganizations(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.getAllOrganizations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить список всех организаций для пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrganizationsForUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOrganizationsForUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.getAllOrganizationsForUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить информацию об организации по ID
         * @param {string} id Идентификатор организации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.getOrganizationById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить организации по типу верификации
         * @param {GetOrganizationsByStatus} getOrganizationsByStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationByStatus(getOrganizationsByStatus: GetOrganizationsByStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationByStatus(getOrganizationsByStatus, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.getOrganizationByStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Отклонить организацию
         * @param {ModerationReject} moderationReject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectOrganization(moderationReject: ModerationReject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectOrganization(moderationReject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.rejectOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить информацию об организации
         * @param {string} id Идентификатор организации
         * @param {OrganizationUpdate} organizationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganization(id: string, organizationUpdate: OrganizationUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganization(id, organizationUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.updateOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Добавить новую организацию
         * @param {OrganizationCreate} organizationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewOrganization(organizationCreate: OrganizationCreate, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.addNewOrganization(organizationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Одобрить организацю
         * @param {ModerationApprove} moderationApprove 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveOrganization(moderationApprove: ModerationApprove, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.approveOrganization(moderationApprove, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удалить организацию
         * @param {string} id Идентификатор организации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOrganization(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить список всех организаций
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrganizations(options?: RawAxiosRequestConfig): AxiosPromise<Array<Organization>> {
            return localVarFp.getAllOrganizations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить список всех организаций для пользователя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrganizationsForUser(options?: RawAxiosRequestConfig): AxiosPromise<Array<Organization>> {
            return localVarFp.getAllOrganizationsForUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить информацию об организации по ID
         * @param {string} id Идентификатор организации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.getOrganizationById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить организации по типу верификации
         * @param {GetOrganizationsByStatus} getOrganizationsByStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationByStatus(getOrganizationsByStatus: GetOrganizationsByStatus, options?: RawAxiosRequestConfig): AxiosPromise<Array<Organization>> {
            return localVarFp.getOrganizationByStatus(getOrganizationsByStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Отклонить организацию
         * @param {ModerationReject} moderationReject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectOrganization(moderationReject: ModerationReject, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.rejectOrganization(moderationReject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить информацию об организации
         * @param {string} id Идентификатор организации
         * @param {OrganizationUpdate} organizationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization(id: string, organizationUpdate: OrganizationUpdate, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.updateOrganization(id, organizationUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
    /**
     * 
     * @summary Добавить новую организацию
     * @param {OrganizationCreate} organizationCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public addNewOrganization(organizationCreate: OrganizationCreate, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).addNewOrganization(organizationCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Одобрить организацю
     * @param {ModerationApprove} moderationApprove 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public approveOrganization(moderationApprove: ModerationApprove, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).approveOrganization(moderationApprove, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удалить организацию
     * @param {string} id Идентификатор организации
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public deleteOrganization(id: string, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).deleteOrganization(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить список всех организаций
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getAllOrganizations(options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).getAllOrganizations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить список всех организаций для пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getAllOrganizationsForUser(options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).getAllOrganizationsForUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить информацию об организации по ID
     * @param {string} id Идентификатор организации
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganizationById(id: string, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).getOrganizationById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить организации по типу верификации
     * @param {GetOrganizationsByStatus} getOrganizationsByStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganizationByStatus(getOrganizationsByStatus: GetOrganizationsByStatus, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).getOrganizationByStatus(getOrganizationsByStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Отклонить организацию
     * @param {ModerationReject} moderationReject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public rejectOrganization(moderationReject: ModerationReject, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).rejectOrganization(moderationReject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить информацию об организации
     * @param {string} id Идентификатор организации
     * @param {OrganizationUpdate} organizationUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public updateOrganization(id: string, organizationUpdate: OrganizationUpdate, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).updateOrganization(id, organizationUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



